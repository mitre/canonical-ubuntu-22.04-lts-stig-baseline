name: Verify Ubuntu 22.04

# define the triggers for this action
on:
  pull_request:
  push:
    # trigger this action on any push to main branch
    branches: [main]

jobs:
  gold-image:
    name: Ubuntu 22.04
    runs-on: ubuntu-22.04
    env:
      # so that we can use InSpec without manually accepting the license
      CHEF_LICENSE: accept
      RESULTS_FILE: "pipeline_run.json"

      # path to our profile
      # PROFILE: .
    steps:
      # updating all dependencies is always a good start
      - name: PREP - Update runner
        run: sudo apt-get update

      - name: PREP - Install Cinc
        run: curl -L https://omnitruck.cinc.sh/install.sh | sudo bash -s -- -P cinc-auditor -v 6

      - name: PREP - Install SAF CLI
        run: npm install -g @mitre/saf

      # checkout the profile, because that's where our profile is!
      - name: PREP - Check out this repository
        uses: actions/checkout@v4

      - name: Clone full repository so we can push
        run: git fetch --prune --unshallow

      - name: Set short git commit SHA
        id: vars
        run: |
          calculatedSha=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

      - name: Confirm git commit SHA output
        run: echo ${{ env.COMMIT_SHORT_SHA }}

      # double-check that we don't have any serious issues in our profile code
      - name: LINT - Run Cinc Auditor Check
        run: cinc-auditor check .

      # launch a container as the test target
      # - name: DEPLOY - Run a Docker container from nginx
      #   run: docker run -dit --name nginx nginx:latest

      # install dependencies on the container so that hardening will work
      # - name: DEPLOY - Install Python for our nginx container
      #   run: |
      #     docker exec nginx apt-get update -y
      #     docker exec nginx apt-get install -y python3

      # fetch the hardening role and requirements
      # - name: HARDEN - Fetch Ansible role
      #   run: |
      #     git clone --branch docker https://github.com/mitre/ansible-nginx-stigready-hardening.git || true
      #     chmod 755 ansible-nginx-stigready-hardening

      # - name: HARDEN - Fetch Ansible requirements
      #   run: ansible-galaxy install -r ansible-nginx-stigready-hardening/requirements.yml

      # harden!
      # - name: HARDEN - Run Ansible hardening
      #   run: ansible-playbook --inventory=nginx, --connection=docker ansible-nginx-stigready-hardening/hardening-playbook.yml

      - name: VALIDATE - Run Cinc Auditor
        # we dont want to stop if our InSpec run finds failures, we want to continue and record the result
        continue-on-error: true
        run: |
          sudo cinc-auditor exec . --input-file=inputs.yml --reporter cli json:${{ env.RESULTS_FILE }} --enhanced-outcomes

      # attest
      # - name: VALIDATE - Apply an Attestation
      #   run: |
      #     saf attest apply -i results/pipeline_run.json attestation.json -o results/pipeline_run_attested.json

      # save our results to the pipeline artifacts, even if the InSpec run found failing tests
      - name: VALIDATE - Save Test Result JSON
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.RESULTS_FILE }}

      # drop off the data with our dashboard
      # - name: VALIDATE - Upload to Heimdall
      #   continue-on-error: true
      #   run: |
      #     curl -# -s -F data=@results/pipeline_run_attested.json -F "filename=${{ github.actor }}-pipeline-demo-${{ github.sha }}.json" -F "public=true" -F "evaluationTags=${{ github.repository }},${{ github.workflow }}" -H "Authorization: Api-Key ${{ secrets.HEIMDALL_API_KEY }}" "https://heimdall-demo.mitre.org/evaluations"

      - name: VERIFY - Display our results summary
        run: |
          saf view summary -i ${{ env.RESULTS_FILE }}

      - name: Generate Markdown Summary
        continue-on-error: true
        id: generate-summary
        run: |
          saf view summary -i ${{env.RESULTS_FILE }} --format=markdown --no-stdout -o output.md
          cat output.md >> $GITHUB_STEP_SUMMARY

      # check if the pipeline passes our defined threshold
      # - name: VERIFY - Ensure the scan meets our results threshold
      #   run: |
      #     saf validate threshold -i ${{ env.RESULTS_FILE }} -F threshold.yml
